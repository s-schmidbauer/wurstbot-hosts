---
  #######################################
  # RELAYD
  #######################################
- name: configure relayd

  tasks:
  - name: relayd - configure
    blockinfile:
      dest: /etc/relayd.conf
      block: |
          timeout 2000
          interval 4
          table <wurstbot_http_hosts> { {{ nagios_clients_http | join(' ') }} }
          table <wurstbot_nagios_hosts> { {{ nagios_servers | join(' ') }} }
          table <wurstbot_mysql_hosts> { {{ nagios_clients_mysql | join(' ') }} }
          table <wurstbot_squid_hosts> { {{ nagios_clients_squid | join(' ') }} }
          table <wurstbot_repo_hosts> { {{ nagios_clients_repo | join(' ') }} }
          table <wurstbot_wiki_hosts> { {{ nagios_clients_wiki | join(' ') }} }
          table <wurstbot_owncloud_hosts> { {{ nagios_clients_owncloud | join(' ') }} }
          table <wurstbot_zabbix_hosts> { {{ zabbix_servers | join(' ') }} }
          http protocol "proxy" {
              tcp { nodelay, sack, socket buffer 65536, backlog 100 }
              pass request quick header "Host" value "www.wurstbot.com" forward to <wurstbot_http_hosts>
              pass request quick header "Host" value "nagios.wurstbot.com" forward to <wurstbot_nagios_hosts>
              pass request quick header "Host" value "mysql.wurstbot.com" forward to <wurstbot_mysql_hosts>
              pass request quick header "Host" value "squid.wurstbot.com" forward to <wurstbot_squid_hosts>
              pass request quick header "Host" value "repo.wurstbot.com" forward to <wurstbot_repo_hosts>
              pass request quick header "Host" value "wiki.wurstbot.com" forward to <wurstbot_wiki_hosts>
              pass request quick header "Host" value "owncloud.wurstbot.com" forward to <wurstbot_owncloud_hosts>
              pass request quick header "Host" value "zabbix.wurstbot.com" forward to <wurstbot_zabbix_hosts>
              match response header remove "X-Powered-By"
              match response header set "X-Frame-Options" value "deny"
              match response header set "X-Content-Type-Options" value "nosniff"
              match response header set "X-XSS-Protection" value "1; mode=block"
              match response header append "Content-Security-Policy" value "default-src 'none'"
              match response header append "Content-Security-Policy" value "script-src 'self'"
              match response header append "Content-Security-Policy" value "style-src 'self'"
              match response header append "Content-Security-Policy" value "img-src 'self'"
              match response header append "Content-Security-Policy" value "connect-src 'self'"
              match response header append "Content-Security-Policy" value "frame-ancestors 'none'"
              return error
              pass
          }
          http protocol "proxy_tls" {
              # use www. only cert for relayd (no sni)
              tcp { nodelay, sack, socket buffer 65536, backlog 100 }
              tls { no tlsv1.0, ciphers "HIGH" }
              return error
              pass
          }
          relay "wurstbot_http_relay" {
              listen on {{ bgp_ha_ip }} port 80
              protocol "proxy"
              forward to <wurstbot_http_hosts> port 80 mode loadbalance check http "/" code 200
              forward to <wurstbot_nagios_hosts> port 80 mode loadbalance check http "/" code 200
              forward to <wurstbot_repo_hosts> port 80 mode loadbalance check http "/" code 200
              forward to <wurstbot_wiki_hosts> port 80 mode loadbalance check http "/" code 200
              forward to <wurstbot_owncloud_hosts> port 80 mode loadbalance check http "/" code 200
              forward to <wurstbot_zabbix_hosts> port 80 mode loadbalance check http "/" code 200
          }
          relay "wurstbot_mysql_relay" {
              listen on {{ bgp_ha_ip }} port 3306
              protocol "proxy"
              forward to <wurstbot_mysql_hosts> port 3306 check tcp
          }
          relay "wurstbot_squid_relay" {
              listen on {{ bgp_ha_ip }} port 3128
              protocol "proxy"
              forward to <wurstbot_squid_hosts> port 3128 check tcp
          }
          relay "wurstbot_https_relay" {
              listen on {{ bgp_ha_ip }} port 443 tls
              protocol "proxy_tls"
              forward to <wurstbot_http_hosts> port 80 mode loadbalance check http "/" code 200
          }
      backup: yes
      marker: "# {mark} ANSIBLE MANAGED BLOCK - relayd config"
      create: true
      mode: 0600
      owner: root
    register: relayd_config_results

  - name: relayd - symlink tls cert
    file:
      src: /etc/ssl/{{ dns_name }}.fullchain.pem
      dest: /etc/ssl/{{ bgp_ha_ip }}:443.crt
      state: link
      group: wheel
      owner: root

  - name: relayd - symlink tls key
    file:
      src: /etc/ssl/private/{{ dns_name }}.key
      dest: /etc/ssl/private/{{ bgp_ha_ip }}:443.key
      state: link
      group: wheel
      owner: root

  - name: relayd - check config
    command: /usr/sbin/relayd -nf /etc/relayd.conf
    register: relayd_result
    ignore_errors: yes

  - name: relayd - handle failure
    action: fail msg="relayd.conf check failed."
    when: relayd_result|failed

  - name: relayd - start
    service: name=relayd state=started

  - name: relay - enable relayd
    shell: rcctl enable relayd

  - name: relayd - reload relayd
    service: name=relayd state=reloaded
    when: relayd_config_results|changed and relayd_result is succeeded

