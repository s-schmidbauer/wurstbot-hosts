---
  #######################################
  # BASIS SETUP
  #######################################
- name: basic system setup
  hosts: node4
  user: admin
  become: true
  become_method: doas

  vars:
    # don't include a trailing slash!
    install_url: https://ftp.bit.nl/pub/OpenBSD
    dns_name: "node4.wurstbot.com"

  tasks:
  - name: set install url
    lineinfile:
      dest=/etc/installurl
      backup=yes
      line="{{ install_url }}"
      state=present
      create=True

  - name: cron - system patches
    cron:
      name: "install system patches"
      special_time: weekly
      job: "syspatch"

  - name: cron - package updates
    cron:
      name: "install package updates"
      special_time: daily
      job: "pkg_add -u"

  - name: cron - refresh certs with acme-client
    cron:
      name: "refresh certs with acme-client"
      special_time: daily
      job: "acme-client {{ dns_name }} && rcctl reload httpd"

  - name: cron - refresh ocsp with ocspcheck
    cron:
      name: "refresh ocsp with ocspcheck"
      special_time: daily
      job: "ocspcheck -vN -o /etc/ssl/{{ dns_name }}.der /etc/ssl/{{ dns_name }}.fullchain.pem"

  #######################################
  # UPDATE SYSTEM AND PACKAGES
  #######################################
- name: install system updates
  hosts: node4
  user: admin
  become: true
  become_method: doas

  vars:
      update_mode: false

  tasks:
    - name: list available system updates
      shell: syspatch -c

    - name: install system updates
      shell: syspatch
      register: system_update_results
      when: update_mode==True

    - name: install package updates
      shell: pkg_add -u
      register: package_update_results
      when: update_mode==True

  #######################################
  # SYSCTL
  #######################################
- name: configure sysctl
  hosts: node4
  user: admin
  become: true
  become_method: doas

  tasks:
  - name: sysctl - configure kernel options
    blockinfile:
      dest: /etc/sysctl.conf
      block: |
        kern.shminfo.shmmax=134217728
        kern.shminfo.shmall=524288
        kern.shminfo.shmmni=240
      create: true
      backup: yes

  #######################################
  # DOAS
  #######################################
- name: configure doas
  hosts: node4
  user: admin
  become: true
  become_method: doas

  tasks:
  - name: doas - configure options
    lineinfile:
      dest: /etc/doas.conf
      line: permit persist setenv { -ENV PS1=$DOAS_PS1 SSH_AUTH_SOCK } :wheel
      backup: yes
      state: present
      create: true


  #######################################
  # PF
  #######################################
- name: configure pf
  hosts: node4
  user: admin
  become: true
  become_method: doas

  tasks:
  - name: pf - configure packet filter
    blockinfile:
      dest: /etc/pf.conf
      block: |
          table <martians> { 0.0.0.0/8 10.0.0.0/8 127.0.0.0/8 169.254.0.0/16     \
                             172.16.0.0/12 192.0.0.0/24 192.0.2.0/24 224.0.0.0/3 \
                             192.168.0.0/16 198.18.0.0/15 198.51.100.0/24        \
                             203.0.113.0/24 }

          set skip on lo

          block return    # block stateless traffic
          pass            # establish keep-state

          # By default, do not permit remote connections to X11
          block return in on ! lo0 proto tcp to port 6000:6010

          set block-policy drop
          set loginterface egress
          set skip on lo0
          match in all scrub (no-df random-id max-mss 1440)
          block in quick on egress from <martians> to any
          block return out quick on egress from any to <martians>
          block all
          pass out quick inet
          pass in on egress inet proto icmp from any to (egress)
          pass in on egress inet proto tcp from any to (egress) port { ssh, http, https, 3128, 3200, 465, 5666, 10050, 10051, smtp, submission, imap, imaps }
      backup: yes
      validate: "/sbin/pfctl -n -f %s"

  - name: pf - check conf
    shell: pfctl -nf /etc/pf.conf
    register: pf_result

  - name: pf - activate pf
    shell: pfctl -f /etc/pf.conf
    when: pf_result is succeeded


  #######################################
  # SSH
  #######################################
- name: configure ssh
  hosts: node4
  user: admin
  become: true
  become_method: doas

  vars:
    ssh_port: 3200

  tasks:
  - name: ssh - start
    service: name=sshd state=started

  - name: ssh - enable ssh
    shell: rcctl enable sshd

  - name: ssh - set authorized key
    authorized_key:
      user: admin
      state: present
      key: "{{ lookup('file', '~/.ssh/id_ecdsa.pub') }}"

  - name: ssh - configure sshd
    blockinfile:
      dest: /etc/ssh/sshd_config
      block: |
        Port {{ ssh_port }}
        PermitRootLogin no
        PasswordAuthentication yes
      backup: yes
      validate: "/usr/sbin/sshd -T -f %s"

  - name: ssh - reload sshd
    service: name=sshd state=reloaded

  #######################################
  # ACME
  #######################################
- name: configure acme
  hosts: node4
  user: admin
  become: true
  become_method: doas

  vars:
    dns_name: "node4.wurstbot.com"
    dns_san_names: ""

  tasks:
  - name: acme - configure acme
    blockinfile:
      dest: /etc/acme-client.conf
      block: |
        domain "{{ dns_name }}" {
          domain key "/etc/ssl/private/{{ dns_name }}.key"
          domain certificate "/etc/ssl/{{ dns_name }}.crt"
          domain full chain certificate "/etc/ssl/{{ dns_name }}.fullchain.pem"
          sign with letsencrypt
        }
      backup: yes
      create: true

  # - name: acme - check config
  #   command: /usr/sbin/acme-client -n
  #   register: acme_result
  #   ignore_errors: yes
  #
  # - name: acme - handle failure
  #   action: fail msg="acme-client.conf check failed."
  #   when: acme_result|failed

    #make sure the cert does not exist yet and a webserver is able to satisify the request
  - name: acme - configure certs and keys
    shell: /usr/sbin/acme-client -vD {{ dns_name }}
    ignore_errors: true

  - name: acme - create ocsp
    shell: ocspcheck -No /etc/ssl/{{ dns_name }}.der /etc/ssl/{{ dns_name }}.fullchain.pem
    register: ocsp_create_result

  #######################################
  # NRPE
  #######################################
- name: configure nrpe
  hosts: node4
  user: admin
  become: true
  become_method: doas

  vars:
    #2.15p8-no_ssl or 2.15p8 for openbsd 6.3
    nrpe_version: 2.15p8-no_ssl
    nrpe_port: 5666
    nagios_servers: 127.0.0.1,192.168.0.0/24,172.16.0.0/24
    nrpe_commands:
      - "command[check_users]=/usr/local/libexec/nagios/check_users -w 5 -c 10"

  tasks:
  - name: nrpe - install
    openbsd_pkg: name=nrpe-{{ nrpe_version }} state=present

  - name: nrpe - start
    service: name=nrpe state=started

  - name: nrpe - enable
    shell: rcctl enable nrpe

  - name: nrpe - config service
    blockinfile:
      dest: /etc/nrpe.cfg
      block: |
        log_facility=daemon
        server_port={{ nrpe_port }}
        allowed_hosts={{ nagios_servers }}
        debug=0
        connection_timeout=300
        allow_weak_random_seed=0
        {{ nrpe_commands }}
      backup: yes
      state: present
    register: nrpe_config_results

  # - name: nrpe - extra config - commands
  #   blockinfile:
  #     dest: /etc/nrpe.cfg
  #     block: |
  #
  #     backup: yes
  #     state: present
  #   register: nrpe_config_results

  - name: nrpe - restart
    service: name=nrpe state=restarted
    when: nrpe_config_results|changed

  #######################################
  # PHP-FPM
  #######################################
- name: configure php-fpm
  hosts: node4
  user: admin
  become: true
  become_method: doas

  vars:
    # 5.6.34 or 7.0.28
    php_version: "5.6.34"
    php_port: 6060

  tasks:
  - name: php-fpm - install php and modules
    openbsd_pkg: name={{ item }} state=present
    with_items:
        - php-{{ php_version }}
        - php-curl-{{ php_version }}
        - php-mysql-{{ php_version }}
        - php-zip-{{ php_version }}
        - php-gd-{{ php_version }}
        - php-mcrypt-{{ php_version }}
        - php-bz2-{{ php_version }}
        - php-intl-{{ php_version }}

  - name: php-fpm - start
    service: name=php56_fpm state=started

  - name: php-fpm - enable
    shell: rcctl enable php56_fpm

  - name: php-fpm - symlink modules
    file:
      src: '/etc/php-5.6.sample/{{ item }}.ini'
      dest: '/etc/php-5.6/{{ item }}.ini'
      state: link
    with_items:
      - curl
      - mysql
      - zip
      - gd
      - mcrypt
      - bz2
      - intl
    register: phpfpm_results

  - name: php-fpm - configure php-fpm.conf
    lineinfile:
      dest: /etc/php-fpm.conf
      line: listen = 127.0.0.1:{{ php_port }}
      backup: yes
      state: present
    register: phpfpm_results

  - name: php-fpm - configure php.ini
    blockinfile:
      dest: /etc/php-5.6.ini
      block: |
        extension=mysql.so
        extension=mysqli.so
      backup: yes
      state: present
    register: phpfpm_results

  - name: php-fpm - restart
    service: name=php56_fpm state=restarted
    when: phpfpm_results|changed

  #######################################
  # SLOWCGI
  #######################################
- name: configure slowcgi
  hosts: node4
  user: admin
  become: true
  become_method: doas

  tasks:
  - name: slowcgi - started
    service: name=slowcgi state=started

  - name: slowcgi - enable
    shell: rcctl enable slowcgi


  #######################################
  # HTTPD
  #######################################
- name: configure httpd
  hosts: node4
  user: admin
  become: true
  become_method: doas

  vars:
    #httpd_vhost: "wurstbot.com"
    dns_name: node4.wurstbot.com
    php_port: 6060

  tasks:
  - name: httpd - configure httpd
    blockinfile:
      dest: /etc/httpd.conf
      block: |
        server {{ dns_name }} {
           listen on egress port 80
           listen on lo port 80
           root "/{{ dns_name }}"

           # listen on egress tls port 443
           # tls certificate "/etc/ssl/{{ dns_name }}.crt"
           # tls key "/etc/ssl/private/{{ dns_name }}.key"
           # tls ocsp "/etc/ssl/{{ dns_name }}.der"

           # block return 301 "https://$HTTP_HOST$REQUEST_URI"

           location "/.well-known/acme-challenge/*" {
                root "/acme"
                root strip 2
           }

           location "*.php*" {
              fastcgi socket ":{{ php_port }}"
           }

           location "*.cgi" {
                   root { "/" }
                   fastcgi socket "/run/slowcgi.sock"
           }
        }
      create: true
      marker: "# {mark} ANSIBLE MANAGED BLOCK - default vhost"

  - name: httpd - check config
    command: /usr/sbin/httpd -n
    register: httpd_result
    ignore_errors: yes

  - name: httpd - handle failure
    action: fail msg="httpd.conf check failed."
    when: httpd_result|failed

  - name: httpd - started
    service: name=slowcgi state=started

  - name: httpd - enable
    shell: rcctl enable httpd

  - name: httpd - reload httpd
    service: name=httpd state=reloaded
    when: httpd_result is succeeded

  #######################################
  # NAGIOS
  #######################################
- name: configure nagios
  hosts: node4
  user: admin
  become: true
  become_method: doas

  vars:
    php_port: 6060
    nagios_server: true
    nagios_version: "4.3.1p0"
    nagios_web_version: "4.3.1"
    dns_name: nagios.wurstbot.com

    # replication related
    nagios_password: supersecret
    nagios_clients:
      - node2
      - node4
      - node5
    nagios_clients_ssh: #port 3200
      - node2
      - node4
      - node5
    nagios_clients_http: #port 80, 443
      - node2
      - node4
      - node5
    nagios_clients_zabbix: #port 10050
      - node4
      - node5
    nagios_clients_mysql: #port 3306
      - node4
      - node5
    nagios_clients_tor: #port 8443, 9050
      - node2

  tasks:
  - name: nagios - install
    openbsd_pkg: name={{ item }} state=present
    with_items:
      - nagios-{{ nagios_version }}-chroot
      # web  is not tested with -chroot yet
      - nagios-web-{{ nagios_web_version }}-chroot
      - py-passlib-1.7.1p0

  - name: nagios - started
    service: name=nagios state=started

  - name: nagios - enable
    shell: rcctl enable nagios

  - name: nagios - configure basic auth for nagiosadmin
    htpasswd:
      path: /var/www/.nagioshtaccess
      name: nagiosadmin
      password: "{{ nagios_password }}"
      owner: www
      group: www
      mode: 0440
    # register: nagios_basic_auth_config_results

  - name: nagios - configure commands
    blockinfile:
      dest: /etc/nagios/objects/commands.cfg
      block: |
        define command {
            command_name    check_nrpe
            command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c $ARG1$
        }
      create: true
      backup: yes
      marker: "# {mark} ANSIBLE MANAGED BLOCK - nagios commands"

  - name: nagios - configure hosts
    blockinfile:
      dest: /etc/nagios/objects/localhost.cfg
      block: |
        define host {
                use openbsd-server
                host_name       {{ item }}
                address         {{ item }}.wurstbot.com
        }
      create: true
      backup: yes
      marker: "# {mark} ANSIBLE MANAGED BLOCK - nagios host {{ item }}"
    with_items: '{{ nagios_clients }}'

  - name: nagios - configure hostgroups
    blockinfile:
      dest: /etc/nagios/objects/localhost.cfg
      block: |
        define hostgroup {
                hostgroup_name  wurstbot-openbsd-servers ;
                alias           OpenBSD Servers ;
                members         {{ nagios_clients |join(', ') }}
        }
      marker: "# {mark} ANSIBLE MANAGED BLOCK - nagios hostgroups "
      create: true
      backup: yes
    with_items: '{{ nagios_clients }}'

  - name: nagios - configure services
    blockinfile:
      dest: /etc/nagios/objects/localhost.cfg
      block: |
        # DISK CHECKS
        ############
        define service{
                use                             local-service         ; Name of service template to use
                host_name                       {{ nagios_clients |join(', ') }}
                service_description             PING
                check_command                   check_ping!100.0,20%!500.0,60%
                notifications_enabled           1
        }
        define service{
                use                             local-service         ; Name of service template to use
                host_name                       {{ nagios_clients |join(', ') }}
                service_description             Root Partition
                check_command                   check_local_disk!20%!10%!/
                notifications_enabled           1
        }
        define service {
                use                             local-service         ; Name of service template to use
                host_name                       {{ nagios_clients |join(', ') }}
                service_description             Disk /home
                check_command                   check_nrpe!check_disk_home
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients |join(', ') }}
                service_description             Disk /var
                check_command                   check_nrpe!check_disk_var
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients |join(', ') }}
                service_description             Disk /usr
                check_command                   check_nrpe!check_disk_usr
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients |join(', ') }}
                service_description             Disk /usr/local
                check_command                   check_nrpe!check_disk_usr_local
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients |join(', ') }}
                service_description             Disk /tmp
                check_command                   check_nrpe!check_disk_tmp
                notifications_enabled           1
        }
        # TCP CHECKS
        ############
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_ssh |join(', ') }}
                service_description             SSH
                check_command                   check_tcp!3200
                notifications_enabled           1
                }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_mysql |join(', ') }}
                service_description             mysql
                check_command                   check_tcp!3306
                notifications_enabled           1
                }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_zabbix |join(', ') }}
                service_description             zabbix server
                check_command                   check_tcp!10050
                notifications_enabled           1
                }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_tor |join(', ') }}
                service_description             Tor SocksPort
                check_command                   check_tcp!9050
                notifications_enabled           1
                }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_tor |join(', ') }}
                service_description             Tor OrPort
                check_command                   check_tcp!8443
                notifications_enabled           1
                }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_http |join(', ') }}
                service_description             HTTP
                check_command                   check_tcp!80
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_http |join(', ') }}
                service_description             HTTPS
                check_command                   check_tcp!443
                notifications_enabled           1
        }

      marker: "# {mark} ANSIBLE MANAGED BLOCK - nagios services"
      create: true
      backup: yes
    # with_items: '{{nagios_clients}}'

  - name: nagios - check config
    command: nagios -v /var/www/etc/nagios/nagios.cfg
    register: nagios_result
    ignore_errors: yes

  - name: nagios - handle failure
    action: fail msg="nagios.cfg check failed."
    when: nagios_result|failed

  - name: nagios - reload nagios
    service: name=nagios state=reloaded
    when: nagios_result is succeeded

  - name: nagios - started
    service: name=nagios state=started

  - name: nagios - enable
    shell: rcctl enable nagios

  - name: nagios - configure httpd vhost
    blockinfile:
      dest: /etc/httpd.conf
      block: |
        server {{ dns_name }} {
           listen on egress port 80
           listen on lo port 80
           root "/nagios"
           authenticate with ".nagioshtaccess"

            directory {
                    index "index.php"
            }

            location "/cgi-bin/nagios/*.cgi" {
                    root { "/" }
                    fastcgi socket "/run/slowcgi.sock"
            }

            location "*.php*" {
                    fastcgi socket ":{{ php_port }}"
            }

            location "/nagios*" {
                    root { "/nagios", strip 1 }
            }
        }
      create: false
      marker: "# {mark} ANSIBLE MANAGED BLOCK - nagios vhost"

  - name: nagios - check httpd config
    command: /usr/sbin/httpd -n
    register: httpd_result
    ignore_errors: yes

  - name: nagios - handle httpd failure
    action: fail msg="httpd.conf check failed."
    when: httpd_result|failed

  - name: nagios - reload httpd when config changed
    service: name=httpd state=reloaded
    when: nagios_result is succeeded and httpd_result is succeeded


  #######################################
  # MariaDB
  #######################################
- name: configure mysql
  hosts: node4
  user: admin
  become: true
  become_method: doas

  vars:
    mysql_version: "10.0.34v1"

    # replication related
    mysql_root_pass: "supersecret"
    mysql_repl_pass: "supersecret"
    mysql_is_master: true
    mysql_is_slave: false
    mysql_master_host: ""
    mysql_repl_dbs:
      - zabbix

    php_version: "5.6.34"
    py_mysql_version: "1.2.5p4"

  tasks:
  - name: mysql - install
    openbsd_pkg: name={{ item }} state=present
    with_items:
      - mariadb-server-{{ mysql_version }}
      - mariadb-client-{{ mysql_version }}
      - php-mysql
      - php-mysqli-{{ php_version }}
      # on bsd
      - py-mysql-{{ py_mysql_version }}
      # - python-mysqldb on linux

  # - name: mysql - install_db
  #   shell: mysql_install_db
  #   run_once: true
  #   ignore_errors: true

  - name: mysql - started
    service: name=mysqld state=started

  - name: mysql - enable
    shell: rcctl enable mysqld

  - name: mysql - configure .my.cnf
    blockinfile:
      dest: /etc/my.cnf
      block: |
        listen on 0.0.0.0

        [client]
        user=root
        password={{ mysql_root_pass }}
      backup: yes
      create: true
    register: mysql_client_config_results

  - name: mysql - update root password
    mysql_user: check_implicit_admin=yes user=root host={{ item }} password={{ mysql_root_pass }} login_user=root login_password={{ mysql_root_pass }} state=present
    with_items:
      - localhost
      - "{{ ansible_hostname }}"

  - name: mysql - remove anonymous user(s) not in the database
    mysql_user: name='' host={{ item }} login_user=root login_password={{ mysql_root_pass }} state=absent
    with_items:
      - localhost
      - "{{ ansible_hostname }}"

  - name: mysql - remove the test database
    mysql_db: name=test login_user=root login_password={{ mysql_root_pass }} state=absent

    #to be fixed:
    # replication only granted for localhost
    # | 'zabbix_slave'@'localhost'  | def           | REPLICATION SLAVE       | NO           |

    # show call grants: select * from information_schema.user_privileges;

    #replication user name is "database_slave"
  - name: mysql - grant replication privileges to {{ item }}_slave for replicated dbs
    mysql_user: user={{ item }}_slave password={{ mysql_repl_pass }} priv="*.*:REPLICATION SLAVE" login_user=root login_password={{ mysql_root_pass }} state=present
    with_items: '{{mysql_repl_dbs}}'
    when: mysql_is_master
    register: mysql_grant_replication_result

  - name: mysql - master - update my.cnf to do bin-logging with to be replicated dbs
    lineinfile:
      dest: /etc/my.cnf
      line: "binlog_do_db  = {{ item }}"
      insertafter: "^log-bin="
      backup: yes
      create: true
    with_items: '{{mysql_repl_dbs}}'
    when: mysql_is_master and mysql_grant_replication_result is succeeded
    register: mysql_repl_config_results

    # mysql slave: needs to be set to inital log postion manually of with ansible mysql_replication module
    # create database databasename;
    # start slave;
    # show slave status\G

  # - name: mysql - check config
  #   command: mysqld --help --verbose
  #   register: mysqld_result
  #   ignore_errors: yes
  #
  # - name: mysql - handle failure
  #   action: fail msg="my.cnf check failed."
  #   when: mysql_result|failed

  - name: mysql - restart mysqld
    service: name=mysqld state=restarted
    when: ( mysql_client_config_results|changed ) or ( mysql_repl_config_results|changed )
