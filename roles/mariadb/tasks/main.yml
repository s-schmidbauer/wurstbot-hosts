---
  #######################################
  # MariaDB
  #######################################

  - name: mysql - install
    openbsd_pkg: name={{ item }} state=present
    with_items:
      - mariadb-server-{{ mysql_version }}
      - mariadb-client-{{ mysql_version }}
      - php-mysql
      - php-mysqli-{{ php_version }}
      # on bsd
      - py-mysql-{{ py_mysql_version }}
      # - python-mysqldb on linux
    register: mysql_install_results

  - name: mysql - install_db
    shell: mysql_install_db
    ignore_errors: true
    when: mysql_install_results|changed

  - name: mysql - configure .my.cnf listener
    lineinfile:
      dest: /etc/my.cnf
      line: listen on {{ node_ip }}
      insertafter: ^[mysqld]
    register: mysql_client_listener_results

  - name: mysql - configure .my.cnf client config
    blockinfile:
      dest: /etc/my.cnf
      block: |
        [client]
        user=root
        password={{ mysql_root_pass }}
      backup: yes
      create: true
      marker: "# {mark} ANSIBLE MANAGED BLOCK - mysql client config"
    register: mysql_client_config_results

  - name: mysql - started
    service: name=mysqld state=started

  - name: mysql - enable
    shell: rcctl enable mysqld

  - name: mysql - update root password
    mysql_user: check_implicit_admin=yes user=root host={{ item }} password={{ mysql_root_pass }} login_user=root login_password={{ mysql_root_pass }} host={{ node_ip }} state=present
    with_items:
      - localhost
      - "{{ ansible_hostname }}"

  - name: mysql - remove anonymous user(s) not in the database
    mysql_user: name='' host={{ item }} login_user=root login_password={{ mysql_root_pass }} state=absent
    with_items:
      - localhost
      - "{{ ansible_hostname }}"

  - name: mysql - remove the test database
    mysql_db: name=test login_user=root login_password={{ mysql_root_pass }} state=absent

  - name: mysql - flush mysqld hosts hourly
    cron:
      name: "flush mysqld hosts"
      special_time: hourly
      job: "/usr/local/bin/mysqladmin flush-hosts"

    #to be fixed:
    # replication only granted for localhost
    # | 'zabbix_slave'@'localhost'  | def           | REPLICATION SLAVE       | NO           |

    # show call grants: select * from information_schema.user_privileges;

    #replication user name is "database_slave"
  - name: mysql - grant replication privileges to {{ item }}_slave for replicated dbs
    mysql_user: user={{ item }}_slave password={{ mysql_repl_pass }} priv="*.*:REPLICATION SLAVE" login_user=root login_password={{ mysql_root_pass }} host={{ node_ip }} state=present
    with_items: '{{ mysql_repl_dbs }}'
    when: mysql_is_master
    register: mysql_grant_replication_result

    # ansible not working? GRANT ALL PRIVILEGES ON zabbix.* TO 'zabbix'@'%' identified by '****';
    # - name: mysql - grant zabbix user all permissions to zabbix db
    #   mysql_user: check_implicit_admin=yes user=zabbix host={{ zabbix_master }} priv="zabbix.*:ALL" password={{ zabbix_db_pass }} login_user=root login_password={{ mysql_root_pass }} host={{ zabbix_master }} state=present

  - name: mysql - master - update my.cnf to do bin-logging with to be replicated dbs
    lineinfile:
      dest: /etc/my.cnf
      line: "binlog_do_db  = {{ item }}"
      insertafter: "^log-bin="
      backup: yes
      create: true
    with_items: '{{mysql_repl_dbs}}'
    when: mysql_is_master and mysql_grant_replication_result is succeeded
    register: mysql_repl_config_results

    # mysql slave: needs to be set to inital log postion manually of with ansible mysql_replication module
    # create database databasename;
    # start slave;
    # show slave status\G

  # - name: mysql - check config
  #   command: mysqld --help --verbose
  #   register: mysqld_result
  #   ignore_errors: yes
  #
  # - name: mysql - handle failure
  #   action: fail msg="my.cnf check failed."
  #   when: mysql_result|failed

  - name: mysql - restart mysqld
    service: name=mysqld state=restarted
    when: ( mysql_client_listener_results|changed ) or ( mysql_client_config_results|changed ) or ( mysql_repl_config_results|changed )
