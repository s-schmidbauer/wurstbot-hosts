---
  #######################################
  # BASIS SETUP
  #######################################
- name: basic system setup
  hosts: node2, node4, node5
  user: admin
  become: true
  become_method: doas

  tasks:
  - name: set install url
    lineinfile:
      dest: /etc/installurl
      backup: yes
      line: "{{ install_url }}"
      state: present
      create: True

  - name: set default profile
    blockinfile:
      dest: /etc/profile
      backup: yes
      block: |
        HISTFILE=$HOME/.history
        HISTSIZE=500
        PATH=$PATH:/usr/local/bin:/usr/local/sbin
      state: present
      create: True

  - name: forward root mails to admin
    lineinfile:
      dest: /etc/mail/aliases
      backup: yes
      line: "root: {{ admin_email }}"
      state: present
      create: True
    register: admin_email_result

  - name: activate forward root mails change
    shell: newaliases
    when: admin_email_result|changed

  - name: cron - system patches
    cron:
      name: "install system patches"
      special_time: weekly
      job: "syspatch"

  - name: cron - package updates
    cron:
      name: "install package updates"
      special_time: daily
      job: "pkg_add -u"

  - name: cron - refresh certs with acme-client
    cron:
      name: "refresh certs with acme-client"
      special_time: daily
      job: "acme-client {{ dns_name }} && rcctl reload httpd"

  - name: cron - refresh ocsp with ocspcheck
    cron:
      name: "refresh ocsp with ocspcheck"
      special_time: daily
      job: "ocspcheck -vN -o /etc/ssl/{{ dns_name }}.der /etc/ssl/{{ dns_name }}.fullchain.pem"

  - name: cron - create zabbix agentd pid files and restart zabbix agent at reboot
    cron:
      name: "create zabbix agent pid files"
      special_time: reboot
      job: "touch /var/run/zabbix_agentd.pid ; chown _zabbix:_zabbix /var/run/zabbix_agentd.pid ; rcctl restart zabbix_agentd"

  - name: cron - create zabbix server pid files and restart zabbix server at reboot
    cron:
      name: "create zabbix server pid files"
      special_time: reboot
      job: "touch /var/run/zabbix_server.pid ; chown _zabbix:_zabbix /var/run/zabbix_server.pid ; rcctl restart zabbix_server"

  - name: cron - create zabbix proxy pid files and restart zabbix proxy at reboot
    cron:
      name: "create zabbix proxy pid files"
      special_time: reboot
      job: "touch /var/run/zabbix_proxy.pid ; chown _zabbix:_zabbix /var/run/zabbix_proxy.pid ; rcctl restart zabbix_proxy"



  #######################################
  # UPDATE SYSTEM AND PACKAGES
  #######################################
- name: install system updates
  hosts: node2, node4, node5
  user: admin
  become: true
  become_method: doas

  tasks:
    # - name: list available system updates
    #   shell: syspatch -c

    - name: install system updates
      shell: syspatch
      register: system_update_results
      when: update_mode==True

    - name: install package updates
      shell: pkg_add -u
      register: package_update_results
      when: update_mode==True

    - name: nrpe - install extra packages
      openbsd_pkg: name={{ item }} state=present
      with_items: "{{ extra_packages }}"
      register: extra_packages_result

  #######################################
  # SYSCTL
  #######################################
- name: configure sysctl
  hosts: node2, node4, node5
  user: admin
  become: true
  become_method: doas

  tasks:
  - name: sysctl - configure kernel options
    blockinfile:
      dest: /etc/sysctl.conf
      block: |
        kern.shminfo.shmmax=134217728         # max size of shared memory segment (bytes)
        kern.shminfo.shmall=524288            # total amount of sharedmemory available (pages)
        kern.shminfo.shmmni=240               # max number of sharedmemory segments system-wide
        # for zabbix agent, double semaphore count - fixes cannot open log: cannot create semaphore set
        kern.seminfo.semmns=120               # max number ofsemaphores system-wide
        # reboot automatically after kernel panic
        ddb.panic=0
      create: true
      backup: yes

  #######################################
  # DOAS
  #######################################
- name: configure doas
  hosts: node2, node4, node5
  user: admin
  become: true
  become_method: doas

  tasks:
  - name: doas - configure options
    lineinfile:
      dest: /etc/doas.conf
      line: permit persist setenv { -ENV PS1=$DOAS_PS1 SSH_AUTH_SOCK } :wheel
      backup: yes
      state: present
      create: true


  #######################################
  # PF
  #######################################
- name: configure pf
  hosts: node2, node4, node5
  user: admin
  become: true
  become_method: doas

  tasks:
  - name: pf - configure packet filter
    blockinfile:
      dest: /etc/pf.conf
      block: |
          table <martians> { 0.0.0.0/8 10.0.0.0/8 127.0.0.0/8 169.254.0.0/16     \
                             172.16.0.0/12 192.0.0.0/24 192.0.2.0/24 224.0.0.0/3 \
                             192.168.0.0/16 198.18.0.0/15 198.51.100.0/24        \
                             203.0.113.0/24 }

          set skip on lo

          block return    # block stateless traffic
          pass            # establish keep-state

          # By default, do not permit remote connections to X11
          block return in on ! lo0 proto tcp to port 6000:6010

          set block-policy drop
          set loginterface egress
          set skip on lo0
          match in all scrub (no-df random-id max-mss 1440)
          block in quick on egress from <martians> to any
          block return out quick on egress from any to <martians>
          block all
          pass out quick inet
          pass in on egress inet proto icmp from any to (egress)
          pass in on egress inet proto tcp from any to (egress) port { ssh, http, https, 3128, 3200, 465, 5666, 10050, 10051, smtp, submission, imap, imaps }
      backup: yes
      validate: "/sbin/pfctl -n -f %s"

  - name: pf - check conf
    shell: pfctl -nf /etc/pf.conf
    register: pf_result

  - name: pf - activate pf
    shell: pfctl -f /etc/pf.conf
    when: pf_result is succeeded


  #######################################
  # SSH
  #######################################
- name: configure ssh
  hosts: node2, node4, node5
  user: admin
  become: true
  become_method: doas

  tasks:
  - name: ssh - start
    service: name=sshd state=started

  - name: ssh - enable ssh
    shell: rcctl enable sshd

  - name: ssh - set authorized key
    authorized_key:
      user: admin
      state: present
      key: "{{ lookup('file', '~/.ssh/id_ecdsa.pub') }}"

  - name: ssh - configure sshd
    blockinfile:
      dest: /etc/ssh/sshd_config
      block: |
        Port {{ ssh_port }}
        PermitRootLogin yes
        PasswordAuthentication yes
        UseDNS no
      backup: yes
      validate: "/usr/sbin/sshd -T -f %s"

  - name: ssh - reload sshd
    service: name=sshd state=reloaded

  #######################################
  # NRPE
  #######################################
- name: configure nrpe
  hosts: node2, node4, node5
  user: admin
  become: true
  become_method: doas

  tasks:
  - name: nrpe - install
    openbsd_pkg: name=nrpe-{{ nrpe_version }} state=present

  - name: nrpe - start
    service: name=nrpe state=started

  - name: nrpe - enable
    shell: rcctl enable nrpe

  - name: nrpe - concatenate commands
    set_fact:
      nrpe_commands_list: "{{ nrpe_commands | join('\n') }}"

  - name: nrpe - config service
    blockinfile:
      dest: /etc/nrpe.cfg
      block: |
        log_facility=daemon
        server_port={{ nrpe_port }}
        allowed_hosts={{ nagios_servers }}
        debug=0
        connection_timeout=300
        allow_weak_random_seed=0
        {{ nrpe_commands_list }}
      backup: yes
      state: present
    register: nrpe_config_results

  # - name: nrpe - extra config - commands
  #   blockinfile:
  #     dest: /etc/nrpe.cfg
  #     block: |
  #
  #     backup: yes
  #     state: present
  #   register: nrpe_config_results

  - name: nrpe - restart
    service: name=nrpe state=restarted
    when: nrpe_config_results|changed

  #######################################
  # PHP-FPM
  #######################################
- name: configure php-fpm
  hosts: node2, node4, node5
  user: admin
  become: true
  become_method: doas

  tasks:
  - name: php-fpm - install php and modules
    openbsd_pkg: name={{ item }} state=present
    with_items:
        - php-{{ php_version }}
        - php-curl-{{ php_version }}
        - php-mysql-{{ php_version }}
        - php-zip-{{ php_version }}
        - php-gd-{{ php_version }}
        - php-mcrypt-{{ php_version }}
        - php-bz2-{{ php_version }}
        - php-intl-{{ php_version }}

  - name: php-fpm - start
    service: name=php56_fpm state=started

  - name: php-fpm - enable
    shell: rcctl enable php56_fpm

  - name: php-fpm - symlink modules
    file:
      src: '/etc/php-5.6.sample/{{ item }}.ini'
      dest: '/etc/php-5.6/{{ item }}.ini'
      state: link
    with_items:
      - curl
      - mysql
      - zip
      - gd
      - mcrypt
      - bz2
      - intl
    register: phpfpm_results

  - name: php-fpm - configure php-fpm.conf
    lineinfile:
      dest: /etc/php-fpm.conf
      line: listen = 127.0.0.1:{{ php_port }}
      backup: yes
      state: present
    register: phpfpm_results

  - name: php-fpm - configure php.ini
    blockinfile:
      dest: /etc/php-5.6.ini
      block: |
        extension=mysql.so
        extension=mysqli.so
      backup: yes
      state: present
    register: phpfpm_results

  - name: php-fpm - restart
    service: name=php56_fpm state=restarted
    when: phpfpm_results|changed

  - name: php-fpm - create test file
    lineinfile:
      dest: /var/www/index.php
      line: <?php phpinfo(); ?>
      state: present
      create: true

  #######################################
  # SLOWCGI
  #######################################
- name: configure slowcgi
  hosts: node2, node4, node5
  user: admin
  become: true
  become_method: doas

  tasks:
  - name: slowcgi - started
    service: name=slowcgi state=started

  - name: slowcgi - enable
    shell: rcctl enable slowcgi


  #######################################
  # HTTPD
  #######################################
- name: configure httpd
  hosts: node2, node4, node5
  user: admin
  become: true
  become_method: doas

  tasks:
  - name: httpd - configure httpd
    blockinfile:
      dest: /etc/httpd.conf
      block: |
        server {{ dns_name }} {
           listen on egress port 80
           listen on lo port 80
           root "/"

           listen on lo tls port 443
           listen on egress tls port 443
           tls certificate "/etc/ssl/{{ dns_name }}.crt"
           tls key "/etc/ssl/private/{{ dns_name }}.key"
           tls ocsp "/etc/ssl/{{ dns_name }}.der"

           # block return 301 "https://$HTTP_HOST$REQUEST_URI"

           location "/.well-known/acme-challenge/*" {
                root "/acme"
                root strip 2
           }

           location "*.php*" {
              fastcgi socket ":{{ php_port }}"
           }

           location "*.cgi" {
                   root { "/" }
                   fastcgi socket "/run/slowcgi.sock"
           }
        }
      create: true
      marker: "# {mark} ANSIBLE MANAGED BLOCK - default vhost"

  - name: httpd - check config
    command: /usr/sbin/httpd -n
    register: httpd_result
    ignore_errors: yes

  - name: httpd - handle failure
    action: fail msg="httpd.conf check failed."
    when: httpd_result|failed

  - name: httpd - started
    service: name=slowcgi state=started

  - name: httpd - enable
    shell: rcctl enable httpd

  - name: httpd - reload httpd
    service: name=httpd state=reloaded
    when: httpd_result is succeeded

  - name: httpd - create test file
    lineinfile:
      dest: /var/www/index.html
      line: <html><p>{{ dns_name }}</p></html>
      state: present
      create: true

  #######################################
  # ACME
  #######################################
- name: configure acme
  hosts: node2, node4, node5
  user: admin
  become: true
  become_method: doas

  tasks:
  - name: acme - configure acme
    blockinfile:
      dest: /etc/acme-client.conf
      block: |
        domain "{{ dns_name }}" {
          alternative names { {{ acme_aliases | join(' ') }} }
          domain key "/etc/ssl/private/{{ dns_name }}.key"
          domain certificate "/etc/ssl/{{ dns_name }}.crt"
          domain full chain certificate "/etc/ssl/{{ dns_name }}.fullchain.pem"
          sign with letsencrypt
        }
      backup: yes
      create: true

  - name: acme - create new key and cert if expired
    shell: /usr/sbin/acme-client -vAD {{ dns_name }}
    register: acme_renew_result
    ignore_errors: true

    #make sure the cert does not exist yet and a webserver is able to satisify the request
  - name: acme - configure cert and key
    shell: /usr/sbin/acme-client -vD {{ dns_name }}
    ignore_errors: true

  - name: acme - create ocsp
    shell: ocspcheck -No /etc/ssl/{{ dns_name }}.der /etc/ssl/{{ dns_name }}.fullchain.pem
    register: ocsp_create_result
    ignore_errors: true

  - name: acme - delete old key and cert if expired
    shell: rm /etc/ssl/private/{{ dns_name }}.key ; rm /etc/ssl/certs/{{ dns_name }}.*
    ignore_errors: true
    register: acme_expired_deletion_result
    when: ocsp_create_result.stdout.find('old') != -1

  - name: acme - create new key and cert if expired
    shell: /usr/sbin/acme-client -vAD {{ dns_name }}
    register: acme_renew_result
    when: acme_expired_deletion_result is succeeded
    ignore_errors: true

  - name: acme - refresh ocsp if key and cert were renewed
    shell: ocspcheck -No /etc/ssl/{{ dns_name }}.der /etc/ssl/{{ dns_name }}.fullchain.pem
    register: ocsp_create_result
    when: acme_renew_result is succeeded
    ignore_errors: true

  #######################################
  # SQUID
  #######################################
- name: configure squid
  hosts: node2, node4, node5
  user: admin
  become: true
  become_method: doas

  tasks:
  - name: squid - install
    openbsd_pkg: name=squid state=present

  - name: squid - start
    service: name=squid state=started

  - name: squid - enable
    shell: rcctl enable squid

  - name: squid - create log dir
    file:
      path: /var/log/squid/
      owner: _squid
      group: _squid
      state: directory

  - name: squid - create cache log
    file:
      path: /var/log/squid/cache.log
      owner: _squid
      group: _squid
      state: touch
    register: squid_cache_log_results

  - name: squid - create access log
    file:
      path: /var/log/squid/access.log
      owner: _squid
      group: _squid
      state: touch
    register: squid_access_log_results

  - name: squid - config service
    blockinfile:
      dest: /etc/squid.cfg
      block: |
          access_log daemon:/var/log/access.log squid
          cache_log daemon:/var/log/cache.log squid

          acl home src 31.201.195.130
          acl work src 84.207.225.37
          acl work mg 62.195.130.48

          acl SSL_ports port 443

          http_access allow home
          http_access allow work
          http_access allow mg
          http_access deny all

          cache_mem {{ squid_cache_mem }} MB
          minimum_object_size 10 KB
          maximum_object_size 10 MB
      state: present
      create: true
      backup: yes
    when: squid_cache_log_results is succeeded and squid_access_log_results is succeeded
    register: squid_config_results

  - name: squid - check config
    command: squid -k parse
    register: squid_result
    ignore_errors: yes

  - name: squid - handle failure
    action: fail msg="squid.conf check failed."
    when: squid_result|failed

  - name: squid - restart
    service: name=squid state=restarted
    when: squid_result is succeeded and squid_config_results|changed

  - name: squid - enable
    shell: rcctl enable squid


  #######################################
  # ZABBIX AGENT
  #######################################
- name: configure zabbix zabbix
  hosts: node2, node4, node5
  user: admin
  become: true
  become_method: doas

  tasks:
  - name: zabbix agent - install
    openbsd_pkg: name={{ item }} state=present
    with_items:
      - zabbix-agent-{{ zabbix_version }}

  # configure zabbix prerequisites
  - name: zabbix - create log dir
    file:
      path: /var/log/zabbix/
      owner: _zabbix
      group: _zabbix
      state: directory

  - name: zabbix - create log files
    file:
      path: /var/log/zabbix/{{ item }}.log
      owner: _zabbix
      group: _zabbix
      state: touch
    with_items:
      - zabbix_server
      - zabbix_proxy
      - zabbix_agentd
    register: zabbix_log_results

  - name: zabbix - create pid files
    file:
      path: /var/run/{{ item }}.pid
      owner: _zabbix
      group: _zabbix
      state: touch
    with_items:
      - zabbix_server
      - zabbix_proxy
      - zabbix_agentd
    register: zabbix_pid_results

  - name: zabbix agent - config zabbix agent
    blockinfile:
      dest: /etc/zabbix/zabbix_agentd.conf
      block: |
          PidFile=/var/run/zabbix_agentd.pid
          LogType=file
          LogFile=/var/log/zabbix/zabbix_agentd.log
          LogFileSize=10
          EnableRemoteCommands=1
          LogRemoteCommands=1
          Server={{ zabbix_servers }}
          ServerActive={{ zabbix_servers }}
          ListenPort=10050
          Hostname={{ dns_name }}
          ListenIP=0.0.0.0
      state: present
      marker: "# {mark} ANSIBLE MANAGED BLOCK - zabbix agent config"
      create: true
      backup: yes
    when: zabbix_log_results is succeeded and zabbix_pid_results is succeeded
    register: zabbix_agent_config_results

  - name: zabbix agent - started
    service: name=zabbix_agentd state=started

  - name: zabbix agent - enable
    shell: rcctl enable zabbix_agentd


  #######################################
  # ZABBIX SERVER
  #######################################
- name: configure zabbix server
  hosts: node2, node4, node5
  user: admin
  become: true
  become_method: doas

  tasks:
  - name: zabbix server - install
    openbsd_pkg: name={{ item }} state=present
    with_items:
      - zabbix-server-{{ zabbix_version}}-mysql
      - zabbix-web
      - php-gd
      - php-mysqli

  - name: zabbix - configure php.ini
    blockinfile:
      dest: /etc/php-5.6.ini
      block: |
          max_execution_time 300
          memory_limit 128M
          post_max_size 16M
          upload_max_filesize 2M
          max_input_time 300
          always_populate_raw_post_data -1
      backup: yes
      state: present
      marker: "# {mark} ANSIBLE MANAGED BLOCK - zabbix php options"
    register: zabbix_php_results

  - name: zabbix - create db
    mysql_db:
      name: zabbix
      encoding: utf8
      collation: utf8_bin
      login_user: root
      login_password: "{{ mysql_root_pass }}"
      state: present
    register: zabbix_create_db_results
    when: zabbix_install_mode == True

  - name: zabbix - grant permissions to zabbix user
    mysql_user: name='{{ zabbix_db_user }}' password={{ zabbix_db_pass }} priv="zabbix.*:ALL" login_user=root login_password="{{ mysql_root_pass }}" state=present

  - name: zabbix - download source package for db dumps
    get_url:
      url: https://sourceforge.net/projects/zabbix/files/ZABBIX%20Latest%20Stable/{{ zabbix_version }}/zabbix-{{ zabbix_version }}.tar.gz/download
      dest: /tmp/zabbix-{{ zabbix_version }}.tar.gz
      mode: 0440
    when: zabbix_install_mode == True

  - name: zabbix - make source directory
    file:
      path: /tmp/zabbix-{{ zabbix_version }}
      state: directory
    when: zabbix_install_mode == True

  # - name: zabbix - unpack source package
  #   unarchive:
  #     src: /tmp/zabbix-{{ zabbix_version }}.tar.gz
  #     dest: /tmp/zabbix-{{ zabbix_version }}
  #     remote_src: yes
  #   when: zabbix_install_mode == True

  - name: zabbix - unpack source package
    shell: tar xfz /tmp/zabbix-{{ zabbix_version }}.tar.gz -C /tmp/
    when: zabbix_install_mode == True and zabbix_create_db_results|changed

  - name: zabbix - import databases
    mysql_db:
      name: zabbix
      login_user: root
      login_password: "{{ mysql_root_pass }}"
      target: /tmp/zabbix-{{ zabbix_version }}/database/mysql/{{ item }}.sql
      state: import
    with_items:
      - schema
      - images
      - data
    when: zabbix_install_mode == True and zabbix_create_db_results|changed
    ignore_errors: true

  - name: zabbix - config zabbix server
    blockinfile:
      dest: /etc/zabbix/zabbix_server.conf
      block: |
          PidFile=/var/run/zabbix_server.pid
          LogType=file
          LogFile=/var/log/zabbix/zabbix_server.log
          DBHost=localhost
          DBName=zabbix
          DBUser={{ zabbix_db_user }}
          DBPassword={{ zabbix_db_pass }}
          # DBSocket=/tmp/mysql.sock
          DBPort=3306
      state: present
      marker: "# {mark} ANSIBLE MANAGED BLOCK - zabbix server config"
      create: true
      backup: yes
    when: zabbix_log_results is succeeded and zabbix_pid_results is succeeded
    register: zabbix_server_config_results

  - name: zabbix - started
    service: name=zabbix_server state=started

  - name: zabbix - enable
    shell: rcctl enable zabbix_server

  - name: zabbix - make chrooted php directory
    file:
      path: /var/www/etc/php-5.6
      state: directory
    when: zabbix_install_mode == True

  - name: zabbix - copy php extensions to chrooted php directory
    shell: cp /etc/php-5.6.sample/* /var/www/etc/php-5.6/
    when: zabbix_install_mode == True

  - name: zabbix - copy php.ini to chrooted directory
    copy:
      src: /etc/php-5.6.ini
      dest: /var/www/etc/php-5.6.ini
      remote_src: yes
    when: zabbix_install_mode == True

  # Use 127.0.0.1 over localhost to avoid issues
  - name: zabbix - configure web interface
    blockinfile:
      dest: /var/www/zabbix/conf/zabbix.conf.php
      block: |
          $DB['TYPE']       = 'MYSQL';
          $DB['SERVER']     = '127.0.0.1';
          $DB['PORT']       = '3306';
          $DB['DATABASE']   = 'zabbix';
          $DB['USER']       = '{{ zabbix_db_user }}';
          $DB['PASSWORD']   = '{{ zabbix_db_pass }}';
          $ZBX_SERVER       = '127.0.0.1';
          $ZBX_SERVER_PORT  = '10051';
          $ZBX_SERVER_NAME  = '{{ dns_name}}';
      backup: yes
      state: present
      marker: "# {mark} ANSIBLE MANAGED BLOCK - zabbix web config"
    register: zabbix_web_config_results
    when: zabbix_install_mode == True

  - name: zabbix - configure httpd vhost
    blockinfile:
      dest: /etc/httpd.conf
      block: |
        server {{ zabbix_dns_name }} {
           alias zabbix{{ node_number }}.wurstbot.com
           listen on egress port 80
           listen on lo port 80
           root "/zabbix"

           listen on lo port 443
           listen on egress tls port 443
           tls certificate "/etc/ssl/{{ dns_name }}.crt"
           tls key "/etc/ssl/private/{{ dns_name }}.key"
           tls ocsp "/etc/ssl/{{ dns_name }}.der"

            directory {
                    index "index.php"
            }

            location "*.php*" {
                    fastcgi socket ":{{ php_port }}"
            }

            location "/.well-known/acme-challenge/*" {
                root "/acme"
                root strip 2
            }
        }
      create: false
      marker: "# {mark} ANSIBLE MANAGED BLOCK - zabbix vhost"

  - name: zabbix - check httpd config
    command: /usr/sbin/httpd -n
    register: httpd_result
    ignore_errors: yes
    when: zabbix_web_config_results|changed

  - name: zabbix - handle httpd failure
    action: fail msg="httpd.conf check failed."
    when: httpd_result|failed

  - name: zabbix - reload httpd when config changed
    service: name=httpd state=reloaded
    when: httpd_result is succeeded


  #######################################
  # NAGIOS
  #######################################
- name: configure nagios
  hosts: node2, node4, node5
  user: admin
  become: true
  become_method: doas

  tasks:
  - name: nagios - install
    openbsd_pkg: name={{ item }} state=present
    with_items:
      - nagios-{{ nagios_version }}-chroot
      # web  is not tested with -chroot yet
      - nagios-web-{{ nagios_web_version }}-chroot
      - py-passlib-1.7.1p0

  - name: nagios - started
    service: name=nagios state=started

  - name: nagios - enable
    shell: rcctl enable nagios

  - name: nagios - configure basic auth for nagiosadmin
    htpasswd:
      path: /var/www/.nagioshtaccess
      name: nagiosadmin
      password: "{{ nagios_password }}"
      owner: www
      group: www
      mode: 0440
    # register: nagios_basic_auth_config_results

  - name: nagios - configure commands
    blockinfile:
      dest: /etc/nagios/objects/commands.cfg
      block: |
        define command {
            command_name    check_nrpe
            command_line    $USER1$/check_nrpe -H $HOSTADDRESS$ -c $ARG1$
        }

        define command{
                command_name    check_imaps
                command_line    $USER1$/check_imap -p 993 -S -H $HOSTADDRESS$ $ARG1$
                }

        define command{
                command_name    check_smtps
                command_line    $USER1$/check_smtp -p 587 -S -H $HOSTADDRESS$ $ARG1$
                }

        define command{
                command_name    check_ssmtp
                command_line    $USER1$/check_ssmtp -p 465 -H $HOSTADDRESS$ $ARG1$
                }

        define command{
                command_name    check_cpu
                command_line    $USER1$/check_cpu -H $HOSTADDRESS$ -w $ARG1$ -c $ARG2$ -p $USER3$
        }

        define command{
                command_name    check_swap
                command_line    $USER1$/check_swap -H $HOSTADDRESS$ -w $ARG1$ -c $ARG2$ -p $USER3$
        }

        define command{
                command_name    check_ram
                command_line    $USER1$/check_ram -H $HOSTADDRESS$ -w $ARG1$ -c $ARG2$ -p $USER3$ -o $ARG3$
        }

        define command{
              command_name      check_load
              command_line      $USER1$/check_load -H $HOSTADDRESS$ -w $ARG1$ -c $ARG2$ -p $USER3$
        }
        define command{
              command_name      check_https_url
              command_line      $USER1$/check_http --ssl -H '$HOSTADDRESS$' -u '$ARG1$'
        }
        define command{
              command_name      check_https_cert_expiry
              command_line      $USER1$/check_http --ssl -H '$HOSTADDRESS$' -u '$ARG1$' -C 30
        }

      create: true
      backup: yes
      marker: "# {mark} ANSIBLE MANAGED BLOCK - nagios commands"

  - name: nagios - configure hosts
    blockinfile:
      dest: /etc/nagios/objects/localhost.cfg
      block: |
        define host {
                use openbsd-server
                host_name       {{ item }}
                address         {{ item }}.wurstbot.com
        }
      create: true
      backup: yes
      marker: "# {mark} ANSIBLE MANAGED BLOCK - nagios host {{ item }}"
    with_items: '{{ nagios_clients }}'

  - name: nagios - configure hostgroups
    blockinfile:
      dest: /etc/nagios/objects/localhost.cfg
      block: |
        define hostgroup {
                hostgroup_name  wurstbot-openbsd-servers ;
                alias           OpenBSD Servers ;
                members         {{ nagios_clients |join(', ') }}
        }
      marker: "# {mark} ANSIBLE MANAGED BLOCK - nagios hostgroups "
      create: true
      backup: yes
    with_items: '{{ nagios_clients }}'

  - name: nagios - configure services
    blockinfile:
      dest: /etc/nagios/objects/localhost.cfg
      block: |
        # LOAD CHECKS
        ############
        define service{
                use                             local-service
                host_name                       {{ nagios_clients |join(', ') }}
                service_description             Users check
                check_command                   check_nrpe!check_users
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients |join(', ') }}
                service_description             Load check
                check_command                   check_nrpe!check_load
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients |join(', ') }}
                service_description             Disk check
                check_command                   check_nrpe!check_disk
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients |join(', ') }}
                service_description             Zombie procs check
                check_command                   check_nrpe!check_zombie_procs
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients |join(', ') }}
                service_description             Total procs check
                check_command                   check_nrpe!check_total_procs
                notifications_enabled           1
        }

        define service{
                use                             local-service
                host_name                       {{ nagios_clients |join(', ') }}
                service_description             PING
                check_command                   check_ping!100.0,20%!500.0,60%
                notifications_enabled           1
        }
        # TCP CHECKS
        ############
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_ssh |join(', ') }}
                service_description             SSH
                check_command                   check_tcp!3200
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_mysql |join(', ') }}
                service_description             squid
                check_command                   check_tcp!3128
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_mysql |join(', ') }}
                service_description             mysql
                check_command                   check_tcp!3306
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_zabbix |join(', ') }}
                service_description             zabbix server
                check_command                   check_tcp!10050
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_tor |join(', ') }}
                service_description             Tor SocksPort
                check_command                   check_tcp!9050
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_tor |join(', ') }}
                service_description             Tor OrPort
                check_command                   check_tcp!8443
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_http |join(', ') }}
                service_description             HTTP
                check_command                   check_tcp!80
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_http |join(', ') }}
                service_description             HTTPS
                check_command                   check_tcp!443
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_mail |join(', ') }}
                service_description             IMAP
                check_command                   check_imap
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_mail |join(', ') }}
                service_description             IMAPS
                check_command                   check_imaps
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_mail |join(', ') }}
                service_description             SMTP
                check_command                   check_smtp
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_mail |join(', ') }}
                service_description             SMTPS
                check_command                   check_smtps
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_mail |join(', ') }}
                service_description             SSMTP
                check_command                   check_ssmtp
                notifications_enabled           1
        }
        # WEB CHECKS
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_http |join(', ')  }}
                service_description             HTTP basic vhost HTML
                check_command                   check_http!{{ dns_name }}/index.html
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_http |join(', ')  }}
                service_description             HTTP basic vhost PHP
                check_command                   check_http!{{ dns_name }}/index.php
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_http |join(', ')  }}
                service_description             HTTPS basic vhost HTML
                check_command                   check_https_url!{{ dns_name }}
                notifications_enabled           1
        }
        define service{
                use                             local-service
                host_name                       {{ nagios_clients_http |join(', ')  }}
                service_description             HTTPS cert expiry in next 30 days
                check_command                   check_https_cert_expiry!{{ dns_name }}
                notifications_enabled           1
        }
      marker: "# {mark} ANSIBLE MANAGED BLOCK - nagios services"
      create: true
      backup: yes
    # with_items: '{{nagios_clients}}'

  - name: nagios - check config
    command: nagios -v /var/www/etc/nagios/nagios.cfg
    register: nagios_result
    ignore_errors: yes

  - name: nagios - handle failure
    action: fail msg="nagios.cfg check failed."
    when: nagios_result|failed

  - name: nagios - reload nagios
    service: name=nagios state=reloaded
    when: nagios_result is succeeded

  - name: nagios - started
    service: name=nagios state=started

  - name: nagios - enable
    shell: rcctl enable nagios

  - name: nagios - configure httpd vhost
    blockinfile:
      dest: /etc/httpd.conf
      block: |
        server {{ nagios_dns_name }} {
           alias nagios{{ node_number }}.wurstbot.com

           listen on egress port 80
           listen on lo port 80
           root "/nagios"
           authenticate with ".nagioshtaccess"

           listen on lo tls port 443
           listen on egress tls port 443
           tls certificate "/etc/ssl/{{ dns_name }}.crt"
           tls key "/etc/ssl/private/{{ dns_name }}.key"
           tls ocsp "/etc/ssl/{{ dns_name }}.der"

            directory {
                    index "index.php"
            }

            location "/cgi-bin/nagios/*.cgi" {
                    root { "/" }
                    fastcgi socket "/run/slowcgi.sock"
            }

            location "*.php*" {
                    fastcgi socket ":{{ php_port }}"
            }

            location "/nagios*" {
                    root { "/nagios", strip 1 }
            }
        }
      create: false
      marker: "# {mark} ANSIBLE MANAGED BLOCK - nagios vhost"

  - name: nagios - check httpd config
    command: /usr/sbin/httpd -n
    register: httpd_result
    ignore_errors: yes

  - name: nagios - handle httpd failure
    action: fail msg="httpd.conf check failed."
    when: httpd_result|failed

  - name: nagios - reload httpd when config changed
    service: name=httpd state=reloaded
    when: nagios_result is succeeded and httpd_result is succeeded


  #######################################
  # MariaDB
  #######################################
- name: configure mysql
  hosts: node2, node4, node5
  user: admin
  become: true
  become_method: doas

  tasks:
  - name: mysql - install
    openbsd_pkg: name={{ item }} state=present
    with_items:
      - mariadb-server-{{ mysql_version }}
      - mariadb-client-{{ mysql_version }}
      - php-mysql
      - php-mysqli-{{ php_version }}
      # on bsd
      - py-mysql-{{ py_mysql_version }}
      # - python-mysqldb on linux
    register: mysql_install_results

  - name: mysql - install_db
    shell: mysql_install_db
    ignore_errors: true
    when: mysql_install_results|changed

  - name: mysql - configure .my.cnf
    blockinfile:
      dest: /etc/my.cnf
      block: |
        listen on 0.0.0.0

        [client]
        user=root
        password={{ mysql_root_pass }}
      backup: yes
      create: true
    register: mysql_client_config_results

  - name: mysql - started
    service: name=mysqld state=started

  - name: mysql - enable
    shell: rcctl enable mysqld

  - name: mysql - update root password
    mysql_user: check_implicit_admin=yes user=root host={{ item }} password={{ mysql_root_pass }} login_user=root login_password={{ mysql_root_pass }} state=present
    with_items:
      - localhost
      - "{{ ansible_hostname }}"

  - name: mysql - remove anonymous user(s) not in the database
    mysql_user: name='' host={{ item }} login_user=root login_password={{ mysql_root_pass }} state=absent
    with_items:
      - localhost
      - "{{ ansible_hostname }}"

  - name: mysql - remove the test database
    mysql_db: name=test login_user=root login_password={{ mysql_root_pass }} state=absent

    #to be fixed:
    # replication only granted for localhost
    # | 'zabbix_slave'@'localhost'  | def           | REPLICATION SLAVE       | NO           |

    # show call grants: select * from information_schema.user_privileges;

    #replication user name is "database_slave"
  - name: mysql - grant replication privileges to {{ item }}_slave for replicated dbs
    mysql_user: user={{ item }}_slave password={{ mysql_repl_pass }} priv="*.*:REPLICATION SLAVE" login_user=root login_password={{ mysql_root_pass }} state=present
    with_items: '{{mysql_repl_dbs}}'
    when: mysql_is_master
    register: mysql_grant_replication_result

  - name: mysql - master - update my.cnf to do bin-logging with to be replicated dbs
    lineinfile:
      dest: /etc/my.cnf
      line: "binlog_do_db  = {{ item }}"
      insertafter: "^log-bin="
      backup: yes
      create: true
    with_items: '{{mysql_repl_dbs}}'
    when: mysql_is_master and mysql_grant_replication_result is succeeded
    register: mysql_repl_config_results

    # mysql slave: needs to be set to inital log postion manually of with ansible mysql_replication module
    # create database databasename;
    # start slave;
    # show slave status\G

  # - name: mysql - check config
  #   command: mysqld --help --verbose
  #   register: mysqld_result
  #   ignore_errors: yes
  #
  # - name: mysql - handle failure
  #   action: fail msg="my.cnf check failed."
  #   when: mysql_result|failed

  - name: mysql - restart mysqld
    service: name=mysqld state=restarted
    when: ( mysql_client_config_results|changed ) or ( mysql_repl_config_results|changed )
